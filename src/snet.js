function snet_() {this.dlfFileToJson = function (fileContents,properties,topology,weighted) {if (core.equal(core.type(properties),"undefined")) {properties={"n": 0,"m": 0,"directed": false};} else {properties.n=0;properties.m=0;properties.directed=false;};if (core.equal(core.type(topology),"undefined")) {topology="chain";};if (core.equal(core.type(weighted),"undefined")) {weighted=true;};network={"nodes": [],"edges": []};fileSection="none";fileLines=core.split(core.replace(fileContents,"\r\n","\n"),"\n");for (l=0;core.LT(l,fileLines.length);l=core.add(l,1)) {line=fileLines[l];record=core.splitCSV(line.trim()," ",true);if (core.logicalOR(core.logicalOR(core.logicalOR((core.equal(core.toLowerCase(record[0]),"*vertices")),(core.equal(core.toLowerCase(record[0]),"*edges"))),(core.equal(core.toLowerCase(record[0]),"*arcs"))),(core.equal(core.toLowerCase(record[0]),"*matrix")))) {fileSection=core.toLowerCase(record[0]);if (core.equal(fileSection,"*vertices")) {n="";for (j=1;core.LT(j,record.length);j=core.add(j,1)) {if (core.equal(record[j],"")) {continue;};if (core.equal(n,"")) {n=core.toNumber(record[j]);break;};};if (core.equal(n,"")) {break;} else {properties.n=n;};} else if (core.equal(fileSection,"*arcs")) {properties.directed=true;};i=0;continue;};if (core.GE(core.length(record),2)) {if (core.equal(fileSection,"*vertices")) {id="";label="";x="";y="";size="";for (j=0;core.LT(j,record.length);j=core.add(j,1)) {if (core.equal(record[j],"")) {continue;};if (core.equal(id,"")) {id=core.toString(record[j]);continue;};if (core.equal(label,"")) {label=core.replace(record[j],core.regExp("\"","g"),"");continue;};if (core.equal(x,"")) {x=core.toNumber(record[j]);continue;};if (core.equal(y,"")) {y=core.toNumber(record[j]);continue;};if (core.equal(size,"")) {if (core.equal(core.type(record[j]),"number")) {size=core.toNumber(record[j]);};};};if (core.equal(x,"")) {x=math.random();};if (core.equal(y,"")) {y=math.random();};if (core.equal(size,"")) {size=1;};node={"id": core.add("n",id),"label": label,"x": x,"y": y,"size": size};network.nodes.push(node);i=core.add(i,1);} else if (core.equal(fileSection,"*edges")) {source="";target="";weight="";for (j=0;core.LT(j,record.length);j=core.add(j,1)) {if (core.equal(record[j],"")) {continue;};if (core.equal(source,"")) {source=core.toNumber(record[j]);continue;};if (core.equal(target,"")) {target=core.toNumber(record[j]);continue;};if (core.equal(weight,"")) {if (core.equal(core.type(record[j]),"number")) {weight=core.toNumber(record[j]);};continue;};};if (core.equal(weight,"")) {weight=1;};edge={"id": core.add("e",core.toString(i)),"source": core.add("n",core.toString(source)),"target": core.add("n",core.toString(target)),"size": weight};network.edges.push(edge);i=core.add(i,1);properties.m=core.add(properties.m,1);} else if (core.equal(fileSection,"*arcs")) {source="";target="";weight="";for (j=0;core.LT(j,record.length);j=core.add(j,1)) {if (core.equal(record[j],"")) {continue;};if (core.equal(source,"")) {source=core.toNumber(record[j]);continue;};if (core.equal(target,"")) {target=core.toNumber(record[j]);continue;};if (core.equal(weight,"")) {weight=core.toNumber(record[j]);continue;};};if (core.equal(weight,"")) {weight=1;};edge={"id": core.add("e",core.toString(i)),"source": core.add("n",core.toString(source)),"target": core.add("n",core.toString(target)),"size": weight};network.edges.push(edge);i=core.add(i,1);properties.m=core.add(properties.m,1);};};};return (network);};};snet = new snet_();