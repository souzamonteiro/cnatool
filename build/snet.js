function snet_() {this.dlfFileToJson = function (fileContents,properties,topology,weighted,network) {if (core.equal(core.type(properties),"undefined")) {properties={"n": 0,"m": 0,"directed": true};} else {properties.n=0;properties.m=0;properties.directed=true;};if (core.equal(core.type(topology),"undefined")) {topology="chain";};if (core.equal(core.type(weighted),"undefined")) {weighted=true;};if (core.equal(core.type(network),"undefined")) {network={"nodes": [],"edges": []};};queryObject="";edgeIndex=[];findNode = function (element,index,list) {thisNode=list[index];found=(core.equal(element.label,queryObject));return (found);};findEdge = function (element,index,list) {thisNode=list[index];found=(core.logicalAND((core.equal(element.source,queryObject.source)),(core.equal(element.target,queryObject.target))));edgeIndex=index;return (found);};id=-1;nodes=[];endOfRecord=false;t1=core.date();fileLines=core.split(core.replace(fileContents,"\r\n","\n"),"\n");system.println(core.add(core.add("Processing ",fileLines.length)," lines ..."));for (l=0;core.LT(l,fileLines.length);l=core.add(l,1)) {if (core.logicalAND((core.different(l,0)),(core.equal(core.mod(l,1000),0)))) {system.println(core.add(core.add(core.add(core.add("Processed ",l.toString())," lines of "),fileLines.length.toString()),"."));};line=fileLines[l];line=core.replace(line,"\t"," ");record=core.splitCSV(line.trim()," ",true);if (core.equal(record[0],"{S}")) {endOfRecord=true;};if (core.GE(core.length(record),1)) {if (core.logicalNot(endOfRecord)) {id=core.add(id,1);label=core.toString(record[0]);x="";y="";size="";if (core.equal(x,"")) {x=math.random();};if (core.equal(y,"")) {y=math.random();};if (core.equal(size,"")) {size=1;};node={"id": core.add("n",id),"label": label,"x": x,"y": y,"size": size};nodes.push(node);} else {for (index in nodes) {var node = nodes[index];queryObject=node.label;nodeFound=network.nodes.find(findNode);if (core.equal(core.type(nodeFound),"undefined")) {node.id=core.add("n",network.nodes.length);network.nodes.push(node);} else {node.id=nodeFound.id;};};if (core.equal(topology,"chain")) {for (i=0;core.LT(i,core.sub(nodes.length,1));i=core.add(i,1)) {node1=nodes[i];node2=nodes[core.add(i,1)];edgeIndex=[];queryObject={"source": node1.id,"target": node2.id};edgeFound=network.edges.find(findEdge);if (core.equal(core.type(edgeFound),"undefined")) {edge={"id": core.add("e",network.edges.length),"source": node1.id,"target": node2.id,"size": 1,"type": "arrow"};network.edges.push(edge);} else {if (weighted) {edge=network.edges[edgeIndex];edge.size=core.add(edge.size,1);};};};} else if (core.equal(topology,"clique")) {for (index1 in nodes) {var node1 = nodes[index1];for (index2 in nodes) {var node2 = nodes[index2];if (core.different(index1,index2)) {edgeIndex=[];queryObject={"source": node1.id,"target": node2.id};edgeFound=network.edges.find(findEdge);if (core.equal(core.type(edgeFound),"undefined")) {edge={"id": core.add("e",network.edges.length),"source": node1.id,"target": node2.id,"size": 1,"type": "arrow"};network.edges.push(edge);} else {if (weighted) {edge=network.edges[edgeIndex];edge.size=core.add(edge.size,1);};};};};};} else if (core.equal(topology,"circle")) {for (i=0;core.LT(i,core.sub(nodes.length,1));i=core.add(i,1)) {node1=nodes[i];node2=nodes[core.add(i,1)];edgeIndex=[];queryObject={"source": node1.id,"target": node2.id};edgeFound=network.edges.find(findEdge);if (core.equal(core.type(edgeFound),"undefined")) {edge={"id": core.add("e",network.edges.length),"source": node1.id,"target": node2.id,"size": 1,"type": "arrow"};network.edges.push(edge);} else {if (weighted) {edge=network.edges[edgeIndex];edge.size=core.add(edge.size,1);};};if (core.equal(core.add(i,1),core.sub(nodes.length,1))) {node1=nodes[core.add(i,1)];node2=nodes[0];edgeIndex=[];queryObject={"source": node1.id,"target": node2.id};edgeFound=network.edges.find(findEdge);if (core.equal(core.type(edgeFound),"undefined")) {edge={"id": core.add("e",network.edges.length),"source": node1.id,"target": node2.id,"size": 1,"type": "arrow"};network.edges.push(edge);} else {if (weighted) {edge=network.edges[edgeIndex];edge.size=core.add(edge.size,1);};};};};};id=-1;nodes=[];endOfRecord=false;};};};properties.n=network.nodes.length;properties.m=network.edges.length;t2=core.date();t=core.sub(t2,t1);system.println(core.add(core.add(core.add(core.add("Processed ",l.toString())," lines of "),fileLines.length.toString()),"."));system.println(core.add(core.add("Elapsed time: ",t)," ms."));return (network);};};snet = new snet_();